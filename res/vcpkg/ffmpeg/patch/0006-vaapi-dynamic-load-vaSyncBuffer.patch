From 18bfb82fdc60821518a3ad835fc99cc7c6038d3a Mon Sep 17 00:00:00 2001
From: 21pages <sunboeasy@gmail.com>
Date: Mon, 2 Dec 2024 21:53:08 +0800
Subject: [PATCH] vaapi dynamic load vaSyncBuffer

Signed-off-by: 21pages <sunboeasy@gmail.com>
---
 libavcodec/vaapi_encode.c | 13 ++++++++++---
 libavcodec/vaapi_encode.h |  2 ++
 2 files changed, 12 insertions(+), 3 deletions(-)

diff --git a/libavcodec/vaapi_encode.c b/libavcodec/vaapi_encode.c
index b8765a19c7..5bf4a062d5 100644
--- a/libavcodec/vaapi_encode.c
+++ b/libavcodec/vaapi_encode.c
@@ -154,8 +154,8 @@ static int vaapi_encode_wait(AVCodecContext *avctx,
            pic->encode_order, pic->input_surface);
 
 #if VA_CHECK_VERSION(1, 9, 0)
-    if (ctx->has_sync_buffer_func) {
-        vas = vaSyncBuffer(ctx->hwctx->display,
+    if (ctx->has_sync_buffer_func && ctx->vaapi_sync_buffer) {
+        vas = ctx->vaapi_sync_buffer(ctx->hwctx->display,
                            pic->output_buffer,
                            VA_TIMEOUT_INFINITE);
         if (vas != VA_STATUS_SUCCESS) {
@@ -2962,7 +2962,14 @@ av_cold int ff_vaapi_encode_init(AVCodecContext *avctx)
 
 #if VA_CHECK_VERSION(1, 9, 0)
     // check vaSyncBuffer function
-    vas = vaSyncBuffer(ctx->hwctx->display, VA_INVALID_ID, 0);
+    if (ctx->hwctx && ctx->hwctx->display) {
+        ctx->vaapi_sync_buffer = (typeof(ctx->vaapi_sync_buffer))
+            vaGetLibFunc(ctx->hwctx->display, "vaSyncBuffer");
+        if (ctx->vaapi_sync_buffer) {
+                vas = ctx->vaapi_sync_buffer(ctx->hwctx->display, VA_INVALID_ID, 0);
+        }
+        av_log(avctx, AV_LOG_INFO, "vaSyncBuffer: %p, vas: %d\n", ctx->vaapi_sync_buffer, vas);
+    }
     if (vas != VA_STATUS_ERROR_UNIMPLEMENTED) {
         ctx->has_sync_buffer_func = 1;
         ctx->encode_fifo = av_fifo_alloc2(ctx->async_depth,
diff --git a/libavcodec/vaapi_encode.h b/libavcodec/vaapi_encode.h
index 0eed9691ca..6563db915c 100644
--- a/libavcodec/vaapi_encode.h
+++ b/libavcodec/vaapi_encode.h
@@ -395,6 +395,8 @@ typedef struct VAAPIEncodeContext {
 
     /** Tail data of a pic, now only used for av1 repeat frame header. */
     AVPacket        *tail_pkt;
+
+    VAStatus (*vaapi_sync_buffer)(VADisplay, VABufferID, uint64_t);
 } VAAPIEncodeContext;
 
 enum {
-- 
2.34.1

